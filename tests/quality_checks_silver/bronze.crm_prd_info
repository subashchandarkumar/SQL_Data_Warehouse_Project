/* Second Table in Inspection
 bronze.crm_prd_info  */

--Check for Nulls or Duplicates in Primary Key
--Expectation: No Result

 SELECT 
	prd_id,
	COUNT(*)
 FROM bronze.crm_prd_info
 GROUP BY prd_id
 HAVING COUNT(*) > 1 OR prd_id IS NULL; -- we add cst_id IS NULL because we want even when there is only one NULL.

 -- Insert data into the table in the silver layer.

 INSERT INTO silver.crm_prd_info(
	prd_id,
	cat_id,
	prd_key,
	prd_nm,
	prd_cost,
	prd_line,
	prd_start_dt,
	prd_end_dt
 )
 SELECT 
	prd_id,
	REPLACE(SUBSTRING(prd_key, 1, 5),'-', '_') AS cat_id,  -- We have 'underscore' in erp source and 'hyphen' in crm source.
	SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,
	prd_nm,
	ISNULL(prd_cost, 0) AS prd_cost,
	CASE UPPER(TRIM(prd_line))
		WHEN 'M' THEN 'Mountain'
		WHEN 'R' THEN 'Road'
		WHEN 'S' THEN 'Other Sales'
		WHEN 'T' THEN 'Touring'
		ELSE 'n/a'
	END AS prd_line,
	CAST(prd_start_dt AS DATE) AS prd_start_dt,
	CAST(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt) -1 AS DATE) AS prd_end_dt
 FROM bronze.crm_prd_info;

/* WHERE REPLACE(SUBSTRING(prd_key, 1, 5),'-', '_') NOT IN
 (
	SELECT DISTINCT id FROM bronze.erp_px_cat_g1v2
	);
	WHERE SUBSTRING(prd_key, 7, LEN(prd_key)) NOT IN 
	(
		SELECT sls_prd_key FROM bronze.crm_sales_details
	)
	These are included with the above code to check for any missing cat_id & prd_key.
*/

-- Check for unwanted Spaces
-- Expectation: No Results
SELECT prd_nm
FROM bronze.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

-- Check for NULLs or Negative Numbers
-- Expectation: No Results
SELECT prd_cost
FROM bronze.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL;

--Data Standardization & Consistency
SELECT DISTINCT prd_line
FROM bronze.crm_prd_info;

-- Check for Invalid Date Orders
SELECT *
FROM bronze.crm_prd_info
WHERE prd_end_dt < prd_start_dt;
-- We have end date before start date, and we build end date with the start date of next product (-1).

--After this step do quality checks like following.

--First check
  SELECT 
	prd_id,
	COUNT(*)
 FROM silver.crm_prd_info
 GROUP BY prd_id
 HAVING COUNT(*) > 1 OR prd_id IS NULL;

 --Second check
SELECT prd_nm
FROM silver.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

--Third check
SELECT prd_cost
FROM silver.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL;

--Fourth check
SELECT DISTINCT prd_line
FROM silver.crm_prd_info;

--Fifth check
SELECT *
FROM silver.crm_prd_info
WHERE prd_end_dt < prd_start_dt;

SELECT * FROM silver.crm_prd_info;
